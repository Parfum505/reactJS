{"version":3,"sources":["components/SearchInput.js","components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","Form","onSubmit","event","preventDefault","Group","InputGroup","Control","type","placeholder","onChange","props","change","target","value","onKeyPress","press","Append","onClick","search","Text","icon","faSearch","Component","Gallery","books","this","items","length","map","item","key","imgUrl","allAuthors","volumeInfo","title","imageLinks","authors","infoLink","thumbnail","lastIndex","author","i","className","href","rel","src","alt","error","App","changeInput","bind","state","query","errors","setState","spinner","document","querySelector","classList","add","fetch","method","then","respons","json","result","remove","catch","val","keyPress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.12ee410f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, InputGroup} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass SearchInput extends Component {\r\n    render() {\r\n        return (\r\n            <Form onSubmit={event=>event.preventDefault()}>\r\n                <Form.Group>\r\n                    <InputGroup>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Type the book title here\"\r\n                            onChange={event=> this.props.change(event.target.value)}\r\n                            onKeyPress={event=> this.props.press(event)}\r\n                        />\r\n                        <InputGroup.Append onClick={() => this.props.search()}>\r\n                            <InputGroup.Text>\r\n                                <FontAwesomeIcon icon={ faSearch } />\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchInput;","import React, { Component } from 'react';\r\n\r\nclass Gallery extends Component {\r\n\r\n    render() {\r\n        let books;\r\n        if (this.props.items.length){\r\n            books = this.props.items.map((item, key)=>{\r\n                let {title, imageLinks, authors, infoLink} = item.volumeInfo;\r\n                let imgUrl, allAuthors;\r\n                if (imageLinks && imageLinks.thumbnail) {\r\n                    imgUrl = imageLinks.thumbnail;\r\n                } else {\r\n                    imgUrl = '/img/book.png';\r\n                }\r\n                if (authors) {\r\n                    const lastIndex = authors.length - 1;\r\n                    allAuthors = authors.map((author, i) => {\r\n                        if (lastIndex === i) {\r\n                            return (<span key={i}>{author}</span>)\r\n                        } else {\r\n                            return (<span key={i}>{author}, </span>)\r\n                        }\r\n                    });\r\n                }\r\n                return (\r\n                    <a key={key} className=\"book\" href={infoLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <div className=\"book_img\">\r\n                            <img src={imgUrl} alt=\"book\"/>\r\n                            <div className=\"book_title-wrap\">\r\n                                <p className=\"book_title ellipsis\">{title}</p>\r\n                            </div>\r\n                        </div>\r\n                        <p className=\"book_author ellipsis\">\r\n                            <span className=\"d-block\">Authors:</span>{allAuthors}\r\n                        </p>\r\n                    </a>\r\n                )\r\n            });\r\n        }\r\n         \r\n        return (\r\n            <div className=\"search-result container mt-5\">\r\n                <div className=\"row justify-content-center\">{books}</div>\r\n                <div className=\"row justify-content-center e\"><span className=\"error\">{this.props.error}</span></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Gallery;","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport SearchInput from \"./components/SearchInput\";\r\nimport Gallery from \"./components/Gallery\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeInput = this.changeInput.bind(this);\r\n        this.search = this.search.bind(this);\r\n        this.state = {\r\n            query: '',\r\n            errors: '',\r\n            items: []\r\n        }\r\n    }\r\n    search () {\r\n        this.setState({items: [], errors: ''});\r\n        const spinner = document.querySelector('.loader');\r\n        spinner.classList.add('active');\r\n        const url = 'https://www.googleapis.com/books/v1/volumes?maxResults=40&q=';\r\n        fetch(`${url}${this.state.query}`, {method: \"GET\"})\r\n            .then(respons=>respons.json())\r\n            .then(result=>{\r\n                spinner.classList.remove('active');\r\n                let {items} = result;\r\n                if (items) {\r\n                    this.setState({items});\r\n                } else {\r\n                    this.setState({\r\n                        errors: 'Can\\'t find this book, try to change your request.'\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n            });\r\n    }\r\n    changeInput (val) {\r\n        this.setState({query: val});\r\n    }\r\n    keyPress (event) {\r\n        if(event.key === 'Enter') this.search();\r\n    }\r\n  render() {\r\n    return (\r\n        <div className=\"bookSearcher\">\r\n          <h1 className=\"mb-4 mt-4\">Book Searcher</h1>\r\n            <SearchInput\r\n                change={this.changeInput}\r\n                search={this.search}\r\n                press={this.keyPress}\r\n            />\r\n            <span className=\"loader\">&nbsp;</span>\r\n            <Gallery items={this.state.items} error={this.state.errors}/>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}